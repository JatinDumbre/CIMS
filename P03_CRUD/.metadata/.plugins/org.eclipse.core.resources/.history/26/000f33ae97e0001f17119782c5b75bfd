package com.cims.crud.services;

import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.cims.crud.entities.Material_Project;
import com.cims.crud.repositories.MaterialProjectRepository;
import com.cims.crud.repositories.SiteOperatorRepository;
import com.cims.crud.repositories.UserRepository;

import Classes.GetMaterial;
import jakarta.transaction.Transactional;

@Service
public class SiteOperatorService {
	@Autowired
	SiteOperatorRepository sorepo;
	@Autowired
	UserRepository urepo;
	@Autowired
	MaterialProjectRepository mprepo;
	
	 public List<GetMaterial> getMaterial(int userId) {
	        List<Object[]> results = sorepo.findMaterialsBySiteOperator(userId);
	        List<GetMaterial> materials = new ArrayList<>();

	        for (Object[] row : results) {
	            materials.add(new GetMaterial(
	                (String) row[0], // project_name
	                (String) row[1], // material_name
	                (Float) row[2], // quantity
	                (String) row[3], // unit_name
	                (String) row[4], // category_name
	                (String) row[5], // description
	                (Integer) row[6], // projectManagerId
	                (Integer) row[7]  // siteOperatorId
	            ));
	        }

	        return materials;
	    }

	
	 @Transactional
	    public String addMaterialBySiteOperator(String materialName, String unitName, Float quantity, int siteOperatorId) {
	        // Step 1: Get the unit ID from the unit name
	        int unitId = mprepo.findUnitIdByName(unitName)
	                .orElseThrow(() -> new RuntimeException("Unit '" + unitName + "' not found."));

	        // Step 2: Fetch the material ID and available quantity
	        Object[] materialData = mprepo.findMaterialIdAndQuantity(materialName, unitId)
	                .orElseThrow(() -> new RuntimeException("Material '" + materialName + "' with Unit '" + unitName + "' does not exist."));

	        int materialId = materialData[0];
	        int availableQuantity = (Integer) materialData[1];

	        // Step 3: Ensure that enough material is available
	        if (quantity > availableQuantity) {
	            throw new RuntimeException("Insufficient quantity available for '" + materialName + "'. Available: " + availableQuantity);
	        }

	        // Step 4: Fetch the project ID assigned to the Site Operator
	        int projectId = mprepo.findProjectIdBySiteOperator(siteOperatorId)
	                .orElseThrow(() -> new RuntimeException("No project assigned to this Site Operator"));

	        // Step 5: Update the material quantity in the Material table
	        int rowsUpdated = mprepo.updateMaterialQuantity(materialId, quantity);
	        if (rowsUpdated == 0) {
	            throw new RuntimeException("Failed to update material quantity, insufficient stock");
	        }

	        // Step 6: Insert material into the project
	        Material_Project materialProject = new Material_Project();
	        materialProject.setPj_id(projectId);
	        materialProject.setMat_id(materialId);
	        materialProject.setQuantity(quantity);

	        mprepo.save(materialProject);

	        return "Material '" + materialName + "' added successfully to Project ID: " + projectId;
	    }
}
